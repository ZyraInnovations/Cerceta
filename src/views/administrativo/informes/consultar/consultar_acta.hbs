<div class="max-w-5xl mx-auto px-6 py-10 bg-white shadow-xl rounded-2xl mt-10 space-y-8 transition-all duration-300">
  <h2 class="text-3xl font-bold text-gray-900">🗓️ Consultar Actas de Reunión</h2>

  <!-- Formulario -->
  <form id="formConsulta" class="grid grid-cols-1 md:grid-cols-2 gap-6 bg-gray-50 p-6 rounded-xl shadow-inner">
    <div>
      <label class="block text-sm font-medium text-gray-700 mb-1">Desde</label>
      <input type="date" name="desde" required class="w-full border border-gray-300 px-4 py-2 rounded-lg bg-white text-gray-800" />
    </div>
    <div>
      <label class="block text-sm font-medium text-gray-700 mb-1">Hasta</label>
      <input type="date" name="hasta" required class="w-full border border-gray-300 px-4 py-2 rounded-lg bg-white text-gray-800" />
    </div>
    <div class="md:col-span-2 text-right">
      <button type="submit" class="inline-flex items-center bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg font-medium shadow transition duration-200">
        🔍 Consultar
      </button>
    </div>
  </form>

  <!-- Resultados -->
  <div id="resultados" class="space-y-4"></div>
</div>
<script src="https://cdn.jsdelivr.net/npm/html2canvas@1.4.1/dist/html2canvas.min.js"></script>
<script>
  // Funciones auxiliares fuera del submit
  function generarListaConclusiones(texto) {
    const puntos = texto.split(/\s*(\d+\.)\s+/).filter(p => p.trim() !== '');
    if (puntos.length <= 1) {
      return `<p><strong class="text-lg underline">🧠 Conclusiones:</strong><br>${texto}</p>`;
    }

    let lista = '<p><strong class="text-lg underline">🧠 Conclusiones:</strong></p><ol class="list-decimal ml-6 space-y-2">';
    for (let i = 0; i < puntos.length; i += 2) {
      const contenido = puntos[i + 1] ? puntos[i + 1].trim() : puntos[i].trim();
      lista += `<li>${contenido}</li>`;
    }
    lista += '</ol>';
    return lista;
  }

  function formatearFecha(fechaISO) {
    const fecha = new Date(fechaISO);
    const dia = String(fecha.getDate()).padStart(2, '0');
    const mes = String(fecha.getMonth() + 1).padStart(2, '0');
    const año = fecha.getFullYear();
    return `${dia}/${mes}/${año}`;
  }

  // Evento del formulario
  document.getElementById('formConsulta').addEventListener('submit', async (e) => {
    e.preventDefault();
    const { desde, hasta } = e.target;
    const resultados = document.getElementById('resultados');
    resultados.innerHTML = `<div class="text-gray-500">⌛ Cargando actas...</div>`;

    try {
      const res = await fetch(`/actas?desde=${desde.value}&hasta=${hasta.value}`);
      const data = await res.json();

      if (!res.ok) throw new Error(data.message || 'Error en la consulta');
      if (data.length === 0) {
        resultados.innerHTML = '<p class="text-red-600">No se encontraron actas.</p>';
        return;
      }

      resultados.innerHTML = '';

      data.forEach((acta) => {
        const container = document.createElement('div');
        container.className = 'bg-white border border-gray-200 rounded-lg p-6 shadow-md transition hover:shadow-lg relative';
        container.id = `acta-${acta.id}`;

        container.innerHTML = `
          <div class="flex items-center justify-between cursor-pointer toggle-summary">
            <div>
              <h3 class="text-xl font-semibold text-gray-900">📄 Acta #${acta.id} - ${formatearFecha(acta.fecha)}</h3>
              <p class="text-gray-700"><strong>Tema:</strong> ${acta.tema}</p>
              <p class="text-gray-700"><strong>Hora:</strong> ${acta.hora_inicio} - ${acta.hora_fin}</p>
            </div>
            <div class="text-2xl text-gray-500 transition-transform transform toggle-icon">➕</div>
          </div>

          <div class="details hidden mt-4 text-base text-gray-800 transition-all duration-300 space-y-4">
            ${generarListaConclusiones(acta.conclusiones)}
            <p><strong>Agenda:</strong> ${acta.agenda}</p>

            <div>
              <h4 class="font-semibold text-md mt-2">👥 Asistentes:</h4>
              <ul class="list-disc ml-5 space-y-2">
                ${acta.asistentes.map(a => `
                  <li><strong>${a.cargo}:</strong> ${a.nombre}<br>
                  <img src="${a.firma}" alt="Firma de ${a.nombre}" class="w-40 mt-2 border rounded shadow-lg bg-white p-2" />
                  </li>
                `).join('')}
              </ul>
            </div>

            <div>
              <h4 class="font-semibold text-md mt-2">📝 Plan de Acción:</h4>
              <ul class="list-disc ml-5 space-y-2">
                ${acta.acciones.map(ac => `
                  <li>
                    <strong>Plan:</strong> ${ac.plan}<br>
                    <strong>Responsable:</strong> ${ac.responsable}<br>
                    <strong>Fecha:</strong> ${ac.fecha}<br>
                    <strong>Recursos:</strong> ${ac.recursos}
                  </li>
                `).join('')}
              </ul>
            </div>
          </div>

          <button class="descargar-btn mt-4 bg-green-600 text-white px-4 py-2 rounded shadow hover:bg-green-700 transition-all">⬇️ Descargar PNG</button>
        `;

        // Expansión/colapso de detalles
        const toggleBtn = container.querySelector('.toggle-summary');
        toggleBtn.addEventListener('click', () => {
          const details = container.querySelector('.details');
          const icon = container.querySelector('.toggle-icon');
          details.classList.toggle('hidden');
          icon.textContent = details.classList.contains('hidden') ? '➕' : '➖';
        });

        // Descarga como PNG ocultando el botón temporalmente
        const descargarBtn = container.querySelector('.descargar-btn');
        descargarBtn.addEventListener('click', async () => {
          const detalles = container.querySelector('.details');
          detalles.classList.remove('hidden'); // Mostrar detalles antes de exportar

          // Ocultar botón
          descargarBtn.style.display = 'none';

          // Esperar captura
          const canvas = await html2canvas(container);

          descargarBtn.style.display = 'inline-block';

          // Descargar imagen
          const link = document.createElement('a');
          link.href = canvas.toDataURL('image/png');
          link.download = `Acta_${acta.id}.png`;
          link.click();
        });

        resultados.appendChild(container);
      });

    } catch (err) {
      console.error(err);
      resultados.innerHTML = `<p class="text-red-600">❌ Error: ${err.message}</p>`;
    }
  });
</script>
