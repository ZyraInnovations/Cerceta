
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CERCETA Dashboard</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&amp;display=swap" rel="stylesheet">
<html lang="en">
 <head>
  <meta charset="utf-8"/>
  <meta content="width=device-width, initial-scale=1.0" name="viewport"/>
  <title>
   Dashboard
  </title>
  <script src="https://cdn.tailwindcss.com">
  </script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" rel="stylesheet"/>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&amp;display=swap" rel="stylesheet"/>
  <style>
   body {
            font-family: 'Inter', sans-serif;
        }
        #percentage{

            color: black;
        }




  @media (max-width: 768px) {



    }

  @media (max-width: 500px) {



    }



  </style>
  <style>
  .day {
    padding: 0.5rem;
    border-radius: 0.375rem;
    transition: background 0.3s;
  }
</style>

 </head>







<body class="bg-gradient-to-tr from-[#1e99d3] via-[#7cb646]/30 to-[#efa325]/30 min-h-screen font-inter">
  <!-- Header -->
  <header class="flex items-center justify-between py-4 px-8 bg-white/90 rounded-2xl shadow-lg mt-4 mb-8 border-t-8 border-[#c92458] backdrop-blur-xl">
    <div class="flex items-center gap-4">
      <img src="imagenes/logo-cerceta.png" alt="Logo Cerceta" class="w-14 h-14 rounded-full shadow border-4 border-[#efa325]" />
      <div>
        <h1 class="text-2xl font-extrabold text-[#1e99d3]">¡Hola, {{name}}!</h1>
        <p class="text-sm text-[#7cb646] font-semibold">Bienvenido a tu panel Cerceta</p>
      </div>
    </div>
    <div class="flex items-center gap-4">
      <button class="relative" onclick="toggleNotificationPopup()">
        <i class="fas fa-bell text-2xl text-[#c92458]"></i>
        <span id="notificationCount" class="absolute -top-1 -right-1 bg-[#efa325] text-white text-xs rounded-full px-1 hidden"></span>
      </button>
    </div>
  </header>

  <!-- Modal Acciones Rápidas -->
  <div id="accionesRapidasModal" class="fixed inset-0 z-50 bg-black/40 flex items-center justify-center hidden">
    <div class="bg-white rounded-2xl shadow-2xl w-80 p-7 relative border-t-8 border-[#1e99d3] animate-fade-in-up">
      <button onclick="toggleAccionesRapidas()" class="absolute top-3 right-3 text-[#c92458] hover:text-[#efa325] text-2xl font-bold">&times;</button>
      <h3 class="text-xl font-extrabold mb-6 flex items-center gap-2 text-[#1e99d3]">
        <i class="fas fa-bolt text-[#efa325]"></i>
        Acciones Rápidas
      </h3>
      <div class="flex flex-col gap-4">
        <a href="/subir_publicacion"
          class="flex items-center gap-3 px-4 py-3 bg-[#1e99d3] hover:bg-[#1781b3] text-white rounded-xl font-semibold shadow transition-all group">
          <i class="fas fa-pencil-alt text-[#efa325] group-hover:text-white"></i>
          <span>Subir Blog</span>
        </a>
        <a href="/crear_domicilios"
          class="flex items-center gap-3 px-4 py-3 bg-[#7cb646] hover:bg-[#63932e] text-white rounded-xl font-semibold shadow transition-all group">
          <i class="fas fa-motorcycle text-[#c92458] group-hover:text-white"></i>
          <span>Reportar Domicilios</span>
        </a>
      </div>
    </div>
  </div>

  <!-- Tarjetas resumen -->
  <div class="grid grid-cols-1 md:grid-cols-3 gap-8 mb-10 px-2">
    <div class="rounded-2xl shadow-lg p-6 flex flex-col items-start hover:scale-[1.03] transition bg-gradient-to-tr from-[#1e99d3]/90 via-[#1e99d3]/50 to-[#7cb646]/50">
      <div class="flex items-center justify-between w-full mb-3">
        <div class="flex items-center gap-3">
          <i class="fas fa-broom bg-[#efa325] text-white p-2 rounded-lg text-2xl shadow"></i>
          <span class="font-extrabold text-lg text-white drop-shadow">Bitácora de Aseo</span>
        </div>
        <span class="text-3xl font-bold text-white drop-shadow">{{totalAseo}}</span>
      </div>
      <p class="text-white/80">Informes de este mes</p>
      <a href="#" class="mt-3 text-[#efa325] font-bold hover:underline">Ver detalles</a>
    </div>
    <div class="rounded-2xl shadow-lg p-6 flex flex-col items-start hover:scale-[1.03] transition bg-gradient-to-tr from-[#c92458]/90 via-[#c92458]/60 to-[#efa325]/30">
      <div class="flex items-center justify-between w-full mb-3">
        <div class="flex items-center gap-3">
          <i class="fas fa-user-shield bg-[#7cb646] text-white p-2 rounded-lg text-2xl shadow"></i>
          <span class="font-extrabold text-lg text-white drop-shadow">Bitácora Conserje</span>
        </div>
        <span class="text-3xl font-bold text-white drop-shadow">{{totalConserje}}</span>
      </div>
      <p class="text-white/80">Informes de este mes</p>
      <a href="#" class="mt-3 text-[#7cb646] font-bold hover:underline">Ver detalles</a>
    </div>
    <div class="rounded-2xl shadow-lg p-6 flex flex-col items-start hover:scale-[1.03] transition bg-gradient-to-tr from-[#efa325]/90 via-[#efa325]/50 to-[#c92458]/30">
      <div class="flex items-center justify-between w-full mb-3">
        <div class="flex items-center gap-3">
          <i class="fas fa-money-check-alt bg-[#1e99d3] text-white p-2 rounded-lg text-2xl shadow"></i>
          <span class="font-extrabold text-lg text-white drop-shadow">Pagos</span>
        </div>
        <span class="text-3xl font-bold text-white drop-shadow">$ {{totalPagos}}</span>
      </div>
      <p class="text-white/80">Tus pagos del mes</p>
      <a href="#" class="mt-3 text-[#c92458] font-bold hover:underline">Ver recibos</a>
    </div>
  </div>

  <!-- Calendario y actividades -->
  <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8 px-2">
    <!-- Calendario visual -->
    <div class="bg-white rounded-2xl shadow-lg p-6 border-l-8 border-[#1e99d3]/40">
      <div class="flex items-center mb-4">
        <i class="fas fa-calendar-alt text-[#1e99d3] text-2xl mr-2"></i>
        <h2 class="text-xl font-extrabold text-[#c92458]">Calendario de Alertas</h2>
      </div>
      <div id="calendario-alertas">
        <div class="flex justify-between items-center mb-4">
          <h2 class="text-lg font-semibold text-[#7cb646]">
            ALERTAS DEL MES:
          </h2>
          <h2 id="month-title" class="text-lg font-semibold"></h2>
          <i class="fas fa-chevron-right text-[#efa325]"></i>
        </div>
        <div class="grid grid-cols-7 gap-2 text-center text-[#1e99d3] font-bold">
          <div>M</div><div>T</div><div>W</div><div>T</div><div>F</div><div>S</div><div>S</div>
          <div class="col-span-7 h-1"></div>
          <!-- Días del mes -->
          <div class="day" data-day="1">1</div>
          <div class="day" data-day="2">2</div>
          <div class="day" data-day="3">3</div>
          <div class="day" data-day="4">4</div>
          <div class="day" data-day="5">5</div>
          <div class="day" data-day="6">6</div>
          <div class="day" data-day="7">7</div>
          <div class="day" data-day="8">8</div>
          <div class="day" data-day="9">9</div>
          <div class="day" data-day="10">10</div>
          <div class="day" data-day="11">11</div>
          <div class="day" data-day="12">12</div>
          <div class="day" data-day="13">13</div>
          <div class="day" data-day="14">14</div>
          <div class="day" data-day="15">15</div>
          <div class="day" data-day="16">16</div>
          <div class="day" data-day="17">17</div>
          <div class="day" data-day="18">18</div>
          <div class="day" data-day="19">19</div>
          <div class="day" data-day="20">20</div>
          <div class="day" data-day="21">21</div>
          <div class="day" data-day="22">22</div>
          <div class="day" data-day="23">23</div>
          <div class="day" data-day="24">24</div>
          <div class="day" data-day="25">25</div>
          <div class="day" data-day="26">26</div>
          <div class="day" data-day="27">27</div>
          <div class="day" data-day="28">28</div>
          <div class="day" data-day="29">29</div>
          <div class="day" data-day="30">30</div>
        </div>
      </div>
    </div>
    <!-- Últimas actividades -->
    <div class="bg-white rounded-2xl shadow-lg p-6 border-l-8 border-[#c92458]/40">
      <div class="flex items-center mb-4">
        <i class="fas fa-bolt text-[#efa325] text-2xl mr-2"></i>
        <h2 class="text-xl font-extrabold text-[#1e99d3]">Últimas actividades</h2>
      </div>
      <div id="actividades-container"></div>
      <button id="ver-mas-btn" class="mt-6 px-6 py-2 bg-[#c92458] text-white rounded-full font-bold hover:bg-[#efa325] transition">Ver más</button>
    </div>
  </div>



  <!-- Botón flotante -->
  <button class="fixed bottom-7 right-7 bg-[#1e99d3] hover:bg-[#1781b3] text-white p-4 rounded-full shadow-xl hover:scale-110 transition-all flex items-center gap-2 z-50"
    onclick="toggleAccionesRapidas()">
    <i class="fas fa-plus text-2xl"></i>
    <span class="font-bold hidden md:inline">Acción rápida</span>
  </button>
</body>











<script>
// Variables para manejar la paginación
let actividades = [];
let actividadesPorPagina = 3;
let paginaActual = 0;

// Hacer una solicitud al servidor para obtener las actividades del mes
fetch('/actividades-mes')
  .then(response => response.json())
  .then(data => {
    actividades = data;
    mostrarActividades();
  })
  .catch(error => {
    console.error('Error al obtener las actividades:', error);
  });

// Función para mostrar las actividades en el frontend
function mostrarActividades() {
  const actividadesContainer = document.getElementById('actividades-container');
  const verMasBtn = document.getElementById('ver-mas-btn');

  // Limpiar el contenedor antes de agregar nuevas actividades
  actividadesContainer.innerHTML = '';

  // Obtener las actividades a mostrar en la página actual
  const actividadesMostrar = actividades.slice(paginaActual * actividadesPorPagina, (paginaActual + 1) * actividadesPorPagina);

  // Recorrer las actividades y agregar al HTML
  actividadesMostrar.forEach(actividad => {
    const actividadElement = document.createElement('div');
    actividadElement.classList.add('flex', 'justify-between', 'items-center', 'mb-2');

    const nombreActividad = document.createElement('span');
    nombreActividad.classList.add('text-gray-500');
    nombreActividad.textContent = actividad.nombre_actividad;

    const horaActividad = document.createElement('span');
    horaActividad.classList.add('text-gray-400');
    horaActividad.textContent = actividad.hora;

    actividadElement.appendChild(nombreActividad);
    actividadElement.appendChild(horaActividad);

    actividadesContainer.appendChild(actividadElement);
  });

  // Mostrar u ocultar el botón "Ver más" dependiendo de cuántas actividades quedan
  if ((paginaActual + 1) * actividadesPorPagina < actividades.length) {
    verMasBtn.style.display = 'block'; // Mostrar el botón
  } else {
    verMasBtn.style.display = 'none'; // Ocultar el botón si ya no hay más actividades
  }
}

// Manejar el clic en el botón "Ver más"
document.getElementById('ver-mas-btn').addEventListener('click', () => {
  paginaActual++;
  mostrarActividades();
});
</script>
<script>
// Hacer una solicitud al servidor para obtener las fechas desde la base de datos
fetch('/fechas') // Asegúrate de que esta URL sea la correcta de tu servidor
  .then(response => response.json())
  .then(fechas_alertas => {
    // Llamar a la función para resaltar los días con las fechas obtenidas
    resaltarDias(fechas_alertas);
  })
  .catch(error => {
    console.error('Error al obtener las fechas:', error);
  });

// Función para resaltar los días
// Función para resaltar los días
function resaltarDias(fechas_alertas) {
  // Obtener todos los elementos del calendario
  const dias = document.querySelectorAll('.day');

  // Recorrer todos los días del calendario
  dias.forEach(dia => {
    const diaNumber = dia.getAttribute('data-day'); // Obtener el número del día (1, 2, 3, ..., 30)

    // Crear la fecha en formato '2024-12-DD'
    const fecha = `2024-12-${diaNumber.padStart(2, '0')}`;

    // Si la fecha está en el array de alertas, resaltar el día
    if (fechas_alertas.includes(fecha)) {
      dia.classList.add('bg-purple-500', 'text-white', 'rounded-full');
    }
  });
}

</script>




    <script>
        $(document).ready(function() {
            const datosGrafico = {};
            const labels = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];
            const datasets = Object.keys(datosGrafico).map(nombreEdificio => ({
                label: nombreEdificio,
                data: datosGrafico[nombreEdificio],
                backgroundColor: 'rgba(10, 110, 247, 0.2)',
                borderColor: 'rgba(10, 110, 247, 1)',
                borderWidth: 1
            }));

            const ctx = document.getElementById('pagosChart').getContext('2d');
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: datasets
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    },
                    plugins: {
                        legend: {
                            position: 'top'
                        }
                    }
                }
            });
        });

     document.addEventListener("DOMContentLoaded", function () {
        // Initialize the map
        const map = L.map('map').setView([4.7110, -74.0721], 12); // Centered on Bogotá, Colombia

        // Set up the OpenStreetMap tile layer
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 18,
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

        // Add a marker with a popup
        L.marker([4.7110, -74.0721]).addTo(map)
            .bindPopup('Realiza seguimiento')
            .openPopup();
    });
    </script>



</div>

    </div>
  </div>




<script>
    // Obtener la fecha actual
    const today = new Date();
    const monthNames = [
        'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 
        'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'
    ];

    // Función para obtener el primer día del mes
    function getFirstDayOfMonth(year, month) {
        return new Date(year, month, 1).getDay();
    }

    // Función para obtener el número de días en el mes
    function getDaysInMonth(year, month) {
        return new Date(year, month + 1, 0).getDate();
    }

    // Configurar el calendario
    function renderCalendar() {
        const monthTitle = document.getElementById('month-title');
        const calendarDays = document.getElementById('calendar-days');

        // Establecer el título del mes
        monthTitle.textContent = `${monthNames[today.getMonth()]} ${today.getFullYear()}`;

        // Obtener el primer día del mes y el número de días
        const firstDay = getFirstDayOfMonth(today.getFullYear(), today.getMonth());
        const daysInMonth = getDaysInMonth(today.getFullYear(), today.getMonth());

        // Crear las celdas para los días del calendario
        let daysHTML = '';
        
        // Agregar espacios antes del primer día
        for (let i = 0; i < firstDay; i++) {
            daysHTML += '<div></div>';
        }

        // Agregar los días del mes
        for (let day = 1; day <= daysInMonth; day++) {
            daysHTML += `<div class="text-center p-2">${day}</div>`;
        }

        // Insertar los días en el calendario
        calendarDays.innerHTML = daysHTML;
    }

    // Llamar a la función para renderizar el calendario
    renderCalendar();
</script>

<script>
// Function to toggle the notification popup
function toggleNotificationPopup() {
    const popup = document.getElementById('notificationPopup');
    popup.classList.toggle('hidden'); // Solo mostrar o esconder el popup al hacer clic

    // Si el popup está visible, agregamos un event listener para hacer clic fuera de él
    if (!popup.classList.contains('hidden')) {
        document.addEventListener('click', closePopupOnClickOutside);
    } else {
        document.removeEventListener('click', closePopupOnClickOutside);
    }
}

// Function to close the popup when clicking outside
function closePopupOnClickOutside(event) {
    const popup = document.getElementById('notificationPopup');
    const bell = document.getElementById('notificationBell');
    
    // Verificar si el clic ocurrió fuera del popup y de la campana de notificaciones
    if (!popup.contains(event.target) && event.target !== bell) {
        popup.classList.add('hidden'); // Ocultar el popup
        document.removeEventListener('click', closePopupOnClickOutside); // Remover el listener
    }
}


// Variable to control notification sound interval
let notificationSoundInterval;
let isUserInteracted = false;

// Detect user interaction to allow sound playback
window.addEventListener('click', () => {
    isUserInteracted = true;
});

// Function to play the notification sound
function playNotificationSound() {
    const audio = new Audio('sonidos/level-up-2-199574.mp3');
    audio.play().catch(error => console.error("Error al reproducir sonido:", error));
}

// Function to start sound at 5-second intervals
function startNotificationSound() {
    if (isUserInteracted) {
        playNotificationSound();
        notificationSoundInterval = setInterval(playNotificationSound, 5000);
    }
}

// Function to stop sound when notifications are marked as read
// Function to stop sound when notifications are marked as read
function stopNotificationSound() {
    if (notificationSoundInterval) {
        clearInterval(notificationSoundInterval);
        notificationSoundInterval = null; // Reiniciar el intervalo
    }
}

async function loadNotifications() {
    try {
        const response = await fetch('/notificaciones');
        const data = await response.json();
        
        const notificationCount = data.notificaciones.length;
        const notificationBadge = document.getElementById('notificationCount');
        const notificationList = document.getElementById('notificationList');

        // Actualiza el conteo de notificaciones
        if (notificationCount > 0) {
            notificationBadge.classList.remove('hidden');
            notificationBadge.textContent = notificationCount;
            notificationList.innerHTML = '';

            // Llena la lista de notificaciones
            data.notificaciones.forEach(notificacion => {
                const listItem = document.createElement('li');
                listItem.className = notificacion.leido ? 'bg-gray-200 p-2 rounded-lg' : 'bg-blue-100 p-2 rounded-lg font-bold';
                
                listItem.innerHTML = `
                    <div class="flex justify-between items-center">
                        <span>${notificacion.actividad}</span>
                        <span class="text-xs text-gray-500">${new Date(notificacion.fecha).toLocaleString()}</span>
                    </div>
                `;
                notificationList.appendChild(listItem);
            });

        } else {
            notificationBadge.classList.add('hidden');
            notificationList.innerHTML = '<li class="text-center text-gray-500">No hay notificaciones nuevas</li>';
        }
    } catch (error) {
        console.error("Error al cargar notificaciones:", error);
    }
}


function markNotificationsAsRead(userId) {
    const notificationBadge = document.getElementById('notificationCount');
    const notificationList = document.getElementById('notificationList');
    const popup = document.getElementById('notificationPopup');

    // Ocultar la notificación visualmente
    notificationBadge.classList.add('hidden');
    notificationBadge.textContent = '0';
    notificationList.innerHTML = '<li>No hay notificaciones nuevas</li>';
    popup.classList.add('hidden'); // Ocultar el popup después de marcar como leídas

    // Verificar si el userId está definidotoggleNotificationPopup
    if (!userId) {
        console.error('El user_id no está definido.');
        return;
    }

    // Llamar a la API para marcar como leídas
    fetch(`/marcarNotificacionesComoLeidas/${userId}`, { method: 'POST' })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                console.log("Notificaciones marcadas como leídas:", data);
            } else {
                console.error("No se pudo marcar como leído:", data.message);
            }
        })
        .catch(error => {
            console.error("Error al marcar notificaciones como leídas:", error);
        });
}



// Cargar las notificaciones automáticamente al cargar la página y cada 30 segundos
window.onload = function() {
    loadNotifications(); // Cargar notificaciones automáticamente al cargar la página
    setInterval(loadNotifications, 30000); // Cargar notificaciones cada 30 segundos
};

// Hamburger menu toggle
const hamburger = document.getElementById('hamburger-menu');
const sidebar = document.getElementById('sidebar');

hamburger.addEventListener('click', () => {
    sidebar.classList.toggle('open');
});

// Theme toggle logic
const themeToggle = document.getElementById('theme-toggle');
const htmlElement = document.documentElement;

themeToggle.addEventListener('click', () => {
    htmlElement.classList.toggle('dark');
    if (htmlElement.classList.contains('dark')) {
        localStorage.setItem('theme', 'dark');
    } else {
        localStorage.setItem('theme', 'light');
    }
});

// Load theme from localStorage
const storedTheme = localStorage.getItem('theme');
if (storedTheme === 'dark') {
    htmlElement.classList.add('dark');
}

// Mark the active link in the sidebar
const currentPath = window.location.pathname;
const menuLinks = document.querySelectorAll('.sidebar ul li a');

menuLinks.forEach(link => {
    if (link.dataset.link === currentPath) {
        link.classList.add('active');
    }
});

// Submenu toggle
function toggleSubmenu(id) {
    const submenu = document.getElementById(id);
    submenu.classList.toggle('hidden');
}


</script>

<script>

</script>
<script>
  const nombre = "carlos";
</script>

<script>
// Función para enviar la ubicación actual al servidor
// Función para enviar la ubicación actual al servidor
// Función para enviar la ubicación actual al servidor
async function enviarUbicacion() {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(async (position) => {
      const { latitude, longitude } = position.coords;

      try {
        // Envía la ubicación al servidor
        const response = await fetch('/guardarUbicacion', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ nombre, latitud: latitude, longitud: longitude })
        });

        // Verifica si la respuesta es correcta
        if (!response.ok) {
          throw new Error("Error al enviar ubicación");
        }
      } catch (error) {
        console.error("Error al enviar ubicación:", error);
      }
    },
    (error) => {
      console.error("Error al obtener ubicación:", error);
    },
    { enableHighAccuracy: true } // Habilita mayor precisión
    );
  } else {
    console.error("La geolocalización no está soportada en este navegador.");
  }
}

// Verifica el permiso de ubicación en localStorage y solicita permiso si no está guardado
function verificarYEnviarUbicacion() {
  const ubicacionPermitida = localStorage.getItem("ubicacionPermitida");

  if (ubicacionPermitida === "true") {
    enviarUbicacion();
    setInterval(enviarUbicacion, 300000); // Enviar la ubicación cada 5 minutos
  } else {
    // Solicita permisos de ubicación solo una vez
    navigator.permissions.query({ name: "geolocation" }).then((result) => {
      if (result.state === "granted") {
        localStorage.setItem("ubicacionPermitida", "true");
        enviarUbicacion();
        setInterval(enviarUbicacion, 300000); // Enviar la ubicación cada 5 minutos
      } else if (result.state === "prompt") {
        navigator.geolocation.getCurrentPosition(
          (position) => {
            localStorage.setItem("ubicacionPermitida", "true");
            enviarUbicacion();
            setInterval(enviarUbicacion, 300000); // Enviar la ubicación cada 5 minutos
          },
          (error) => {
            console.error("Permiso de ubicación denegado o fallido:", error);
          }
        );
      }
    });
  }
}

// Llama a la función al cargar la página
verificarYEnviarUbicacion();

</script>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const alertas = {{{json alertas}}}; // Inyectamos como JSON desde backend

    alertas.forEach(alerta => {
      const dayElement = document.querySelector(`.day[data-day='${alerta.dia}']`);
      if (dayElement) {
        dayElement.classList.add('bg-red-100', 'rounded-full', 'cursor-pointer', 'hover:bg-red-200');
        dayElement.setAttribute('title', alerta.nombre);
      }
    });
  });
</script>
<script>
  function toggleAccionesRapidas() {
    const modal = document.getElementById('accionesRapidasModal');
    modal.classList.toggle('hidden');
  }

  // Cerrar si hace clic fuera de la caja
  document.addEventListener('click', function(event) {
    const modal = document.getElementById('accionesRapidasModal');
    const modalBox = modal.querySelector('div');
    if (!modal.classList.contains('hidden') && !modalBox.contains(event.target) && event.target.closest('button[onclick*="toggleAccionesRapidas"]') === null) {
      modal.classList.add('hidden');
    }
  });
</script>
