<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />
  <title>LUXE RESIDENCIAL</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet" />
  <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;500;600&family=Montserrat:wght@300;400;500&display=swap" rel="stylesheet">
  <link rel="icon" href="https://cdn-icons-png.flaticon.com/512/3039/3039435.png" />
  <style>
    :root {
      --luxe-primary: #2a2d3b;
      --luxe-secondary: #4a4e69;
      --luxe-accent: #d4a762;
      --luxe-light: #f8f4e9;
      --luxe-glass: rgba(255, 255, 255, 0.15);
      --luxe-glass-border: rgba(255, 255, 255, 0.2);
    }
    
    body {
      background: linear-gradient(135deg, #f5f7fa 0%, #e4e8f0 100%);
      font-family: 'Montserrat', sans-serif;
      color: var(--luxe-primary);
    }
    
    .glass-card {
      background: var(--luxe-glass);
      backdrop-filter: blur(10px);
      -webkit-backdrop-filter: blur(10px);
      border: 1px solid var(--luxe-glass-border);
      border-radius: 16px;
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    }
    
    .title-font {
      font-family: 'Playfair Display', serif;
    }
    
    .floating-btn {
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
      transition: all 0.3s ease;
    }
    
    .floating-btn:hover {
      transform: translateY(-3px);
      box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2);
    }
    
    .post-card {
      transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.1);
    }
    
    .post-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 15px 30px rgba(0, 0, 0, 0.12);
    }
    
    .parallax-bg {
      background-attachment: fixed;
      background-position: center;
      background-repeat: no-repeat;
      background-size: cover;
    }
    
    /* Animaciones */
    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    .animate-fadeInUp {
      animation: fadeInUp 0.6s ease-out forwards;
    }
    
    /* Scroll personalizado */
    ::-webkit-scrollbar {
      width: 6px;
    }
    
    ::-webkit-scrollbar-track {
      background: rgba(0, 0, 0, 0.05);
    }
    
    ::-webkit-scrollbar-thumb {
      background: var(--luxe-accent);
      border-radius: 3px;
    }
    
    /* Efecto hover para tarjetas */
    .hover-scale {
      transition: transform 0.3s ease;
    }
    
    .hover-scale:hover {
      transform: scale(1.03);
    }
    
    /* Efecto de iluminación */
    .glow-effect {
      position: relative;
    }
    
    .glow-effect::after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: radial-gradient(circle at center, rgba(212, 167, 98, 0.1) 0%, transparent 70%);
      opacity: 0;
      transition: opacity 0.3s ease;
      pointer-events: none;
    }
    
    .glow-effect:hover::after {
      opacity: 1;
    }
    
    /* Nuevos estilos para comentarios */
    .comment-section {
      max-height: 0;
      overflow: hidden;
      transition: max-height 0.4s ease-out, opacity 0.3s ease;
      opacity: 0;
    }
    
    .comment-section.expanded {
      max-height: 500px;
      opacity: 1;
    }
    
    .comment-input {
      transition: all 0.3s ease;
      border: 1px solid transparent;
    }
    
    .comment-input:focus {
      border-color: var(--luxe-accent);
      box-shadow: 0 0 0 2px rgba(212, 167, 98, 0.2);
    }
    
    /* Efecto para botones de interacción */
    .interaction-btn {
      transition: all 0.2s ease;
    }
    
    .interaction-btn:active {
      transform: scale(0.95);
    }
    
    /* Efecto para el modal de comentarios */
    .comments-modal {
      transition: opacity 0.3s ease, transform 0.3s ease;
    }
    
    .comments-modal.show {
      opacity: 1;
      transform: translateY(0);
    }
    
    .comments-modal.hide {
      opacity: 0;
      transform: translateY(20px);
    }
    /* Estilos para la barra de reacciones */
.reactions-bar {
    transition: all 0.3s ease;
    transform-origin: bottom center;
}

.reactions-bar.hidden {
    opacity: 0;
    visibility: hidden;
    transform: translateY(10px) scale(0.8);
}

.reactions-bar:not(.hidden) {
    opacity: 1;
    visibility: visible;
    transform: translateY(0) scale(1);
}

.reaction-option {
    transition: all 0.2s ease;
}

.reaction-option:hover {
    transform: scale(1.3);
    filter: drop-shadow(0 2px 4px rgba(0,0,0,0.2));
}
.reactions-bar {
    position: fixed;
    display: none;
    z-index: 1000;
    background: white;
    border-radius: 50px;
    padding: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    transform: translateY(-10px);
    transition: all 0.2s ease;
}

.reactions-bar:not(.hidden) {
    display: flex;
    transform: translateY(0);
}

.reaction-option {
    cursor: pointer;
    font-size: 1.5rem;
    margin: 0 4px;
    transition: transform 0.2s;
}

.reaction-option:hover {
    transform: scale(1.3);
}
.comentarios-container {
  -webkit-overflow-scrolling: touch; /* Para un desplazamiento suave en iOS */
  overscroll-behavior: contain; /* Evita que el scroll se propague al body */
}
  </style>
</head>
<body class="min-h-screen bg-white">  <!-- Cambiado de bg-gray-50 a bg-white -->
  <!-- Barra de navegación premium -->


  <!-- Hero Section -->
  <section class="relative h-96 flex items-center justify-center overflow-hidden mt-16">
    <div class="parallax-bg absolute inset-0 bg-cover bg-center" style="background-image: url('https://images.unsplash.com/photo-1582268611958-ebfd161ef9cf?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=80')"></div>
    <div class="absolute inset-0 bg-black opacity-40"></div>
    <div class="glass-card p-8 max-w-2xl mx-4 relative z-10 text-center animate-fadeInUp">
      <h2 class="title-font text-3xl md:text-4xl text-white mb-4">Bienvenidos a su comunidad exclusiva</h2>
      <p class="text-[var(--luxe-light)] mb-6">Conectando residentes, creando experiencias</p>
      <button class="bg-[var(--luxe-accent)] text-white px-6 py-2 rounded-full font-medium hover:bg-amber-600 transition transform hover:-translate-y-1 shadow-lg">
        Explorar eventos
      </button>
    </div>
  </section>
<main class="max-w-4xl mx-auto px-4 py-8">
  <div class="flex flex-wrap justify-center gap-6">

    <!-- Evento -->
    <a href="/eventos" class="glass-card w-24 h-24 flex flex-col items-center justify-center rounded-2xl transition hover:shadow-xl group">
      <i class="fas fa-calendar-check text-[var(--luxe-accent)] text-2xl mb-1"></i>
      <span class="text-sm text-gray-800 group-hover:text-[var(--luxe-accent)]">Eventos</span>
    </a>

    <!-- Galería -->
    <a href="/galeria" class="glass-card w-24 h-24 flex flex-col items-center justify-center rounded-2xl transition hover:shadow-xl group">
      <i class="fas fa-images text-[var(--luxe-accent)] text-2xl mb-1"></i>
      <span class="text-sm text-gray-800 group-hover:text-[var(--luxe-accent)]">Galería</span>
    </a>

    <!-- Encuestas -->
    <a href="/encuestas" class="glass-card w-24 h-24 flex flex-col items-center justify-center rounded-2xl transition hover:shadow-xl group">
      <i class="fas fa-comments text-[var(--luxe-accent)] text-2xl mb-1"></i>
      <span class="text-sm text-gray-800 group-hover:text-[var(--luxe-accent)]">Encuestas</span>
    </a>

  </div>
</main>



    <!-- Publicaciones -->
    <h2 class="title-font text-2xl font-semibold mb-6 flex items-center">
      <span class="border-b-2 border-[var(--luxe-accent)] pb-1">Últimas publicaciones</span>
    </h2>
    
    <div id="blogPostsContainer" class="grid grid-cols-1 md:grid-cols-2 gap-6">
      {{#each blogPosts}}
      <article class="glass-card overflow-hidden transition-all duration-300 hover:shadow-lg" data-post-id="{{@index}}">
        <!-- Encabezado -->
        <div class="p-4 flex items-center justify-between">
          <div class="flex items-center">
            <div class="w-10 h-10 rounded-full bg-gradient-to-r from-[var(--luxe-accent)] to-amber-100 flex items-center justify-center mr-3">
              <i class="fas fa-home text-white"></i>
            </div>
            <div>
              <h3 class="font-semibold">Residencia {{this.autor}}</h3>
              <p class="text-xs text-[var(--luxe-secondary)]">{{formatDate this.fecha}}</p>
            </div>
          </div>
          <button class="text-[var(--luxe-secondary)] hover:text-[var(--luxe-accent)] transition-colors">
            <i class="fas fa-ellipsis-h"></i>
          </button>
        </div>
        
        <!-- Imagen -->
        {{#if this.imagen}}
        <div class="relative overflow-hidden h-64">
          <img src="data:{{this.imagen_mime}};base64,{{this.imagen}}" 
               class="absolute inset-0 w-full h-full object-cover transition-transform duration-500 hover:scale-105 cursor-pointer" 
               onclick="openGallery('{{@index}}')">
        </div>
        {{/if}}
        
        <!-- Contenido -->
        <div class="p-4">
          <h2 class="title-font text-xl font-semibold text-[var(--luxe-accent)] mb-2">{{this.titulo}}</h2>
          <p class="text-[var(--luxe-secondary)] mb-4">{{this.descripcion}}</p>
          
          <!-- Archivos adjuntos -->
          <div class="flex flex-wrap gap-2 mb-4">
            {{#if this.pdf}}
            <a download href="data:{{this.pdf_mime}};base64,{{this.pdf}}" class="text-sm bg-red-50 hover:bg-red-100 px-3 py-1 rounded-full flex items-center transition-colors">
              <i class="fas fa-file-pdf text-red-500 mr-2"></i> PDF
            </a>
            {{/if}}
            {{#if this.word}}
            <a download href="data:{{this.word_mime}};base64,{{this.word}}" class="text-sm bg-blue-50 hover:bg-blue-100 px-3 py-1 rounded-full flex items-center transition-colors">
              <i class="fas fa-file-word text-blue-500 mr-2"></i> Word
            </a>
            {{/if}}
            {{#if this.excel}}
            <a download href="data:{{this.excel_mime}};base64,{{this.excel}}" class="text-sm bg-green-50 hover:bg-green-100 px-3 py-1 rounded-full flex items-center transition-colors">
              <i class="fas fa-file-excel text-green-500 mr-2"></i> Excel
            </a>
            {{/if}}
          </div>
          
          <!-- Interacciones -->
          <div class="flex justify-between items-center border-t border-[var(--luxe-glass-border)] pt-3">
            <div class="flex items-center space-x-4">
              <!-- Botón de reacciones -->
              <div class="relative">
                <button class="flex items-center text-[var(--luxe-secondary)] hover:text-[var(--luxe-accent)] reaction-button transition-colors" 
                        data-post-id="{{this.id}}">
                  <i class="far fa-heart mr-1"></i> 
                  <span class="reaction-count">
                    {{#if this.estadisticas.reacciones}}
                      {{#each this.estadisticas.reacciones}}
                        {{#if (eq tipo 'like')}}{{count}}{{/if}}
                      {{/each}}
                    {{else}}0{{/if}}
                  </span>
                </button>
                
                <!-- Barra de reacciones flotante -->
                <div id="reactionsBar-{{this.id}}" class="reactions-bar hidden absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 bg-white rounded-full p-2 shadow-lg z-50">
                  <div class="flex space-x-1">
                    <span class="reaction-option text-2xl cursor-pointer hover:scale-125 transition-transform" 
                          data-reaction="like" title="Me gusta">👍</span>
                    <span class="reaction-option text-2xl cursor-pointer hover:scale-125 transition-transform" 
                          data-reaction="love" title="Me encanta">❤️</span>
                    <span class="reaction-option text-2xl cursor-pointer hover:scale-125 transition-transform" 
                          data-reaction="haha" title="Me divierte">😂</span>
                    <span class="reaction-option text-2xl cursor-pointer hover:scale-125 transition-transform" 
                          data-reaction="wow" title="Me asombra">😮</span>
                    <span class="reaction-option text-2xl cursor-pointer hover:scale-125 transition-transform" 
                          data-reaction="sad" title="Me entristece">😢</span>
                    <span class="reaction-option text-2xl cursor-pointer hover:scale-125 transition-transform" 
                          data-reaction="angry" title="Me enoja">😡</span>
                  </div>
                </div>
              </div>
              
              <!-- Botón de comentarios -->
              <button class="flex items-center text-[var(--luxe-secondary)] hover:text-[var(--luxe-accent)] transition-colors" 
                      onclick="toggleComments('{{this.id}}')">
                <i class="far fa-comment mr-1"></i> 
                <span class="comment-count">{{this.estadisticas.totalComentarios}}</span>
              </button>
            </div>
            
            <!-- Botón de compartir -->
            <button class="text-[var(--luxe-secondary)] hover:text-[var(--luxe-accent)] transition-colors" 
                    onclick="navigator.share ? navigator.share({ title: '{{this.titulo}}', text: '{{this.descripcion}}' }) : alert('Tu navegador no soporta compartir.')">
              <i class="fas fa-share"></i>
            </button>
          </div>
        </div>
      </article>
      {{/each}}
    </div>
  </main>

  <!-- Botón flotante para crear publicación -->
  <button class="fixed bottom-6 right-6 w-14 h-14 rounded-full bg-gradient-to-r from-[var(--luxe-accent)] to-amber-300 text-white text-2xl flex items-center justify-center shadow-lg hover:shadow-xl hover:scale-110 transition-all z-40" onclick="openCreateModal()">
    <i class="fas fa-plus"></i>
  </button>

  <!-- Modal de Galería -->
  <div id="galleryModal" class="fixed inset-0 bg-black bg-opacity-90 hidden justify-center items-center z-50">
    <span class="absolute top-6 right-6 text-white text-3xl cursor-pointer hover:text-gray-300 transition-colors z-50" onclick="closeGallery()">&times;</span>
    <div class="relative w-full h-full">
      <img id="galleryImage" class="absolute inset-0 w-full h-full object-contain p-4" alt="Galería residencial" />
      <button id="prevBtn" class="absolute left-4 top-1/2 transform -translate-y-1/2 bg-[var(--luxe-glass)] text-white w-10 h-10 rounded-full flex items-center justify-center z-50 hover:bg-opacity-80 transition-all">
        <i class="fas fa-chevron-left"></i>
      </button>
      <button id="nextBtn" class="absolute right-4 top-1/2 transform -translate-y-1/2 bg-[var(--luxe-glass)] text-white w-10 h-10 rounded-full flex items-center justify-center z-50 hover:bg-opacity-80 transition-all">
        <i class="fas fa-chevron-right"></i>
      </button>
    </div>
  </div>

  <!-- Modal de Creación -->
  <div id="createModal" class="fixed inset-0 bg-white hidden flex-col z-50 overflow-y-auto">
    <div class="sticky top-0 bg-white border-b flex justify-between items-center p-4 z-10">
      <button class="text-[var(--luxe-secondary)] hover:text-[var(--luxe-accent)] transition-colors" onclick="closeCreateModal()">
        <i class="fas fa-times"></i>
      </button>
      <h2 class="title-font text-lg font-semibold">Nueva Publicación</h2>
      <button class="text-[var(--luxe-accent)] font-semibold hover:text-amber-600 transition-colors" onclick="publishPost()">Publicar</button>
    </div>
    
    <div class="flex-grow p-4">
      <div class="flex items-center mb-6">
        <div class="w-12 h-12 rounded-full bg-[var(--luxe-light)] flex items-center justify-center mr-3">
          <i class="fas fa-user-circle text-2xl text-[var(--luxe-secondary)]"></i>
        </div>
        <div>
          <h3 class="font-semibold">Tu publicación</h3>
          <p class="text-xs text-[var(--luxe-secondary)]">Visible para: <span class="text-[var(--luxe-accent)]">Todos los residentes</span></p>
        </div>
      </div>
      
      <textarea class="w-full border-0 text-lg focus:ring-0 resize-none min-h-[100px] placeholder-[var(--luxe-secondary)] focus:outline-none" placeholder="¿Qué deseas compartir con la comunidad?"></textarea>
      
      <!-- Selector de medios -->
      <div class="border-2 border-dashed border-[var(--luxe-glass-border)] rounded-xl p-6 text-center mb-6 cursor-pointer hover:bg-[var(--luxe-light)] transition-colors">
        <i class="fas fa-images text-3xl text-[var(--luxe-secondary)] mb-2"></i>
        <h3 class="font-medium text-[var(--luxe-secondary)]">Agregar fotos/videos</h3>
        <p class="text-sm text-[var(--luxe-secondary)]">Arrastra o haz clic para subir</p>
      </div>
      
      <!-- Opciones avanzadas -->
      <div class="glass-card rounded-xl p-4 mb-6">
        <h3 class="font-semibold mb-3 flex items-center justify-between">
          <span>Opciones de publicación</span>
          <i class="fas fa-chevron-down text-sm"></i>
        </h3>
        
        <div class="space-y-3">
          <div class="flex items-center justify-between">
            <span class="text-[var(--luxe-secondary)]">Ubicación</span>
            <button class="text-[var(--luxe-accent)] text-sm flex items-center hover:text-amber-600 transition-colors">
              <i class="fas fa-map-marker-alt mr-1"></i> Agregar
            </button>
          </div>
          
          <div class="flex items-center justify-between">
            <span class="text-[var(--luxe-secondary)]">Archivos adjuntos</span>
            <div class="flex space-x-2">
              <button class="w-8 h-8 rounded-full bg-red-50 hover:bg-red-100 flex items-center justify-center transition-colors">
                <i class="fas fa-file-pdf text-red-500"></i>
              </button>
              <button class="w-8 h-8 rounded-full bg-blue-50 hover:bg-blue-100 flex items-center justify-center transition-colors">
                <i class="fas fa-file-word text-blue-500"></i>
              </button>
              <button class="w-8 h-8 rounded-full bg-green-50 hover:bg-green-100 flex items-center justify-center transition-colors">
                <i class="fas fa-file-excel text-green-500"></i>
              </button>
            </div>
          </div>
          
          <div class="flex items-center justify-between">
            <span class="text-[var(--luxe-secondary)]">Encuesta</span>
            <button class="text-[var(--luxe-accent)] text-sm flex items-center hover:text-amber-600 transition-colors">
              <i class="fas fa-plus-circle mr-1"></i> Crear
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal de Comentarios -->
  <div id="commentsModal" class="fixed inset-0 bg-white hidden flex-col z-50 overflow-hidden">
    <div class="sticky top-0 bg-white border-b flex items-center p-4 z-10">
      <button class="text-[var(--luxe-secondary)] mr-4 hover:text-[var(--luxe-accent)] transition-colors" onclick="closeCommentsModal()">
        <i class="fas fa-arrow-left"></i>
      </button>
      <h2 class="title-font text-lg font-semibold flex-grow text-center">Comentarios</h2>
      <div class="w-6"></div>
    </div>
    
<div class="flex-grow overflow-y-auto p-4 comentarios-container" style="max-height: calc(100vh - 120px);">      <!-- Los comentarios se cargarán aquí dinámicamente -->

    </div>

    <!-- Formulario para nuevo comentario -->
    <div class="sticky bottom-0 bg-white border-t p-3">
      <form class="comment-form">
        <div class="flex items-center">
          <div class="w-10 h-10 rounded-full bg-[var(--luxe-light)] flex items-center justify-center mr-2">
            <i class="fas fa-user-circle text-xl text-[var(--luxe-secondary)]"></i>
          </div>
          <div class="flex-1 relative">
            <input type="text" placeholder="Escribe un comentario..." 
                  class="comment-input w-full bg-[var(--luxe-light)] rounded-full px-4 py-2 text-sm focus:outline-none">
            <button type="submit" class="absolute right-2 top-1/2 transform -translate-y-1/2 text-[var(--luxe-accent)] hover:text-amber-600 transition-colors">
              <i class="fas fa-paper-plane"></i>
            </button>
          </div>
        </div>
      </form>
    </div>
  </div>

  <!-- Notificación flotante -->
  <div id="notification" class="fixed top-4 right-4 glass-card px-4 py-2 rounded-full flex items-center shadow-lg transform translate-x-40 opacity-0 transition-all duration-300 z-50">
    <div class="w-8 h-8 rounded-full bg-[var(--luxe-accent)] flex items-center justify-center mr-2">
      <i class="fas fa-bell text-white text-sm"></i>
    </div>
    <span class="text-white text-sm">Nueva publicación en el blog</span>
  </div>



<!-- Modal de imagen -->
<div id="imageModal" class="fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50 hidden">
  <div class="relative max-w-3xl w-full">
    <button onclick="closeGallery()" class="absolute top-4 right-4 text-white text-2xl z-10">&times;</button>
    <img id="modalImage" src="" class="w-full h-auto rounded shadow-lg" />
  </div>
</div>



<script>
// Variables globales
let currentGalleryIndex = 0;
let currentPostWithComments = null;
const blogPosts = [
    {{#each blogPosts}}
    {
        id: '{{this.id}}',
        imagen: '{{this.imagen}}',
        imagen_mime: '{{this.imagen_mime}}',
        titulo: '{{this.titulo}}',
        descripcion: '{{this.descripcion}}'
    },
    {{/each}}
];

// Funciones para manejar reacciones
function toggleReactions(button) {
    const postId = button.getAttribute('data-post-id');
    const reactionsBar = document.getElementById(`reactionsBar-${postId}`);
    
    // Posicionar la barra de reacciones
    const rect = button.getBoundingClientRect();
    reactionsBar.style.top = `${rect.top - 50}px`;
    reactionsBar.style.left = `${rect.left - (reactionsBar.offsetWidth - button.offsetWidth)/2}px`;
    
    // Mostrar/ocultar
    reactionsBar.classList.toggle('hidden');
    
    // Cerrar al hacer clic fuera
    const closeHandler = function(e) {
        if (!reactionsBar.contains(e.target) && e.target !== button) {
            reactionsBar.classList.add('hidden');
            document.removeEventListener('click', closeHandler);
        }
    };
    
    document.addEventListener('click', closeHandler);
}

async function reaccionar(postId, tipo) {
    try {
        const response = await fetch(`/api/publicaciones/${postId}/reaccionar`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ tipo }),
            credentials: 'include'
        });
        
        if (!response.ok) throw new Error('Error al reaccionar');
        
        const data = await response.json();
        await actualizarInteracciones(postId);
        
    } catch (error) {
        console.error('Error:', error);
        alert('Debes iniciar sesión para reaccionar');
    }
}

async function actualizarInteracciones(postId) {
    try {
        const response = await fetch(`/api/publicaciones/${postId}/estadisticas`, {
            credentials: 'include'
        });
        
        if (!response.ok) throw new Error('Error al cargar estadísticas');
        
        const data = await response.json();
        
        // Actualizar contador de reacciones
        const reactionButton = document.querySelector(`.reaction-button[data-post-id="${postId}"]`);
        if (reactionButton) {
            const reactionCount = reactionButton.querySelector('.reaction-count');
            let total = 0;
            let reactionHtml = '';
            
            data.reacciones.forEach(reaccion => {
                total += reaccion.count;
                reactionHtml += `${obtenerEmoji(reaccion.tipo)} ${reaccion.count} `;
            });
            
            reactionCount.textContent = total;
            reactionCount.innerHTML = reactionHtml || '0';
            
            // Actualizar estado de la reacción del usuario
            if (data.userReaccion) {
                reactionButton.querySelector('i').className = `fas fa-heart text-red-500`;
            } else {
                reactionButton.querySelector('i').className = `far fa-heart`;
            }
        }
        
        // Actualizar contador de comentarios
        const commentCount = document.querySelector(`.post-card[data-post-id="${postId}"] .comment-count`);
        if (commentCount) {
            commentCount.textContent = data.totalComentarios;
        }
        
    } catch (error) {
        console.error('Error al actualizar interacciones:', error);
    }
}

function obtenerEmoji(tipo) {
    const emojis = {
        like: '👍',
        love: '❤️',
        haha: '😂',
        wow: '😮',
        sad: '😢',
        angry: '😡'
    };
    return emojis[tipo] || '👍';
}






// Funciones para manejar comentarios
async function toggleComments(postId) {
  const modal = document.getElementById('commentsModal');
  modal.dataset.postId = postId;
  
  // Mostrar modal primero
  modal.classList.remove('hidden');
  document.body.style.overflow = 'hidden';
  
  // Luego cargar comentarios
  try {
    await cargarComentarios(postId);
    
    // Enfocar el input después de cargar
    setTimeout(() => {
      const input = modal.querySelector('.comment-input');
      if (input) input.focus();
    }, 300);
    
  } catch (error) {
    console.error('Error al cargar comentarios:', error);
    // Puedes mostrar un mensaje de error en el modal
    const container = modal.querySelector('.comentarios-container');
    if (container) {
      container.innerHTML = '<p class="text-center text-red-500">Error al cargar comentarios</p>';
    }
  }
}

async function cargarComentarios(postId) {
    try {
        const response = await fetch(`/api/publicaciones/${postId}/comentarios`, {
            credentials: 'include'
        });
        
        if (!response.ok) throw new Error('Error al cargar comentarios');
        
        const comentarios = await response.json();
        renderizarComentarios(comentarios);
        
    } catch (error) {
        console.error('Error:', error);
        alert('Error al cargar comentarios');
    }
}

function renderizarComentarios(comentarios) {
    const container = document.querySelector('#commentsModal .comentarios-container');
    container.innerHTML = '';
    
    comentarios.forEach(comentario => {
        const comentarioElement = crearElementoComentario(comentario);
        container.appendChild(comentarioElement);
        
        // Agregar respuestas si existen
        if (comentario.respuestas && comentario.respuestas.length > 0) {
            const respuestasContainer = document.createElement('div');
            respuestasContainer.className = 'ml-8 mt-2 space-y-2';
            
            comentario.respuestas.forEach(respuesta => {
                respuestasContainer.appendChild(crearElementoComentario(respuesta, true));
            });
            
            container.appendChild(respuestasContainer);
        }
    });
}

function crearElementoComentario(comentario, esRespuesta = false) {
    const elemento = document.createElement('div');
    elemento.className = `flex items-start ${esRespuesta ? 'ml-4' : ''} mb-4`;
    
    elemento.innerHTML = `
        <div class="w-10 h-10 rounded-full bg-[var(--luxe-light)] flex items-center justify-center mr-3">
            ${comentario.usuario_avatar 
                ? `<img src="${comentario.usuario_avatar}" class="w-full h-full rounded-full object-cover">` 
                : `<i class="fas fa-user-circle text-xl text-[var(--luxe-secondary)]"></i>`}
        </div>
        <div class="flex-1">
            <div class="bg-[var(--luxe-light)] rounded-xl p-3">
                <h4 class="font-semibold">${comentario.usuario_nombre}</h4>
                <p class="mt-1">${comentario.contenido}</p>
                <div class="flex items-center text-xs text-[var(--luxe-secondary)] mt-2 space-x-4">
                    <span>${formatearFecha(comentario.created_at)}</span>
                    <button class="font-medium" onclick="responderComentario(${comentario.id}, '${comentario.usuario_nombre}')">Responder</button>
                    <button class="font-medium flex items-center" onclick="toggleLikeComentario(${comentario.id}, this)">
                        <i class="${comentario.liked_by_me ? 'fas text-red-500' : 'far'} fa-heart mr-1"></i> 
                        <span class="like-count">${comentario.likes_count || 0}</span>
                    </button>
                </div>
            </div>
        </div>
    `;
    
    return elemento;
}

async function toggleLikeComentario(comentarioId, button) {
    try {
        const response = await fetch(`/api/comentarios/${comentarioId}/like`, {
            method: 'POST',
            credentials: 'include'
        });
        
        if (!response.ok) throw new Error('Error al dar like');
        
        const data = await response.json();
        
        // Actualizar UI
        const icon = button.querySelector('i');
        const countElement = button.querySelector('.like-count');
        
        if (icon.classList.contains('far')) {
            icon.classList.remove('far');
            icon.classList.add('fas', 'text-red-500');
            countElement.textContent = parseInt(countElement.textContent) + 1;
        } else {
            icon.classList.remove('fas', 'text-red-500');
            icon.classList.add('far');
            countElement.textContent = parseInt(countElement.textContent) - 1;
        }
        
    } catch (error) {
        console.error('Error:', error);
        alert('Debes iniciar sesión para dar like');
    }
}

async function responderComentario(comentarioId, nombreUsuario) {
    const input = document.querySelector('#commentsModal .comment-input');
    input.value = `@${nombreUsuario} `;
    input.focus();
    input.dataset.parentId = comentarioId;
}

async function publicarComentario() {
    const modal = document.getElementById('commentsModal');
    const postId = modal.dataset.postId;
    const input = modal.querySelector('.comment-input');
    const contenido = input.value.trim();
    const comentarioPadreId = input.dataset.parentId || null;
    
    if (!contenido) return;
    
    try {
        const response = await fetch(`/api/publicaciones/${postId}/comentarios`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ 
                contenido,
                comentario_padre_id: comentarioPadreId 
            }),
            credentials: 'include'
        });
        
        if (!response.ok) throw new Error('Error al publicar comentario');
        
        // Recargar comentarios
        await cargarComentarios(postId);
        
        // Limpiar input
        input.value = '';
        delete input.dataset.parentId;
        
        // Actualizar contador de comentarios en la publicación
        await actualizarInteracciones(postId);
        
    } catch (error) {
        console.error('Error:', error);
        alert('Error al publicar comentario');
    }
}

function formatearFecha(fechaString) {
    const fecha = new Date(fechaString);
    const ahora = new Date();
    const diff = Math.floor((ahora - fecha) / 1000); // diferencia en segundos
    
    if (diff < 60) return 'hace unos segundos';
    if (diff < 3600) return `hace ${Math.floor(diff / 60)} minutos`;
    if (diff < 86400) return `hace ${Math.floor(diff / 3600)} horas`;
    if (diff < 604800) return `hace ${Math.floor(diff / 86400)} días`;
    
    return fecha.toLocaleDateString();
}

// Galería de imágenes
function openGallery(index) {
    currentGalleryIndex = parseInt(index);
    const modal = document.getElementById('galleryModal');
    const img = document.getElementById('galleryImage');
    
    // Verificar que la imagen existe en el post
    if (blogPosts[currentGalleryIndex] && blogPosts[currentGalleryIndex].imagen) {
        img.src = `data:${blogPosts[currentGalleryIndex].imagen_mime};base64,${blogPosts[currentGalleryIndex].imagen}`;
        img.onload = function() {
            modal.classList.remove('hidden');
            document.body.style.overflow = 'hidden';
        };
        img.onerror = function() {
            console.error('Error al cargar la imagen');
            // Mostrar imagen de error o mensaje
            img.src = 'ruta/a/imagen-de-error.jpg';
            modal.classList.remove('hidden');
        };
    } else {
        console.error('No hay imagen en este post');
        // Puedes mostrar un mensaje o cerrar el modal
    }
}

function closeGallery() {
    const modal = document.getElementById('galleryModal');
    if (modal) {
        modal.classList.add('hidden');
        document.body.style.overflow = 'auto';
        
        // Limpiar la imagen para liberar memoria
        const img = document.getElementById('galleryImage');
        if (img) {
            img.src = '';
        }
    }
}

function navigateGallery(direction) {
    currentGalleryIndex += direction;
    if (currentGalleryIndex < 0) currentGalleryIndex = blogPosts.length - 1;
    if (currentGalleryIndex >= blogPosts.length) currentGalleryIndex = 0;
    
    const img = document.getElementById('galleryImage');
    img.src = `data:${blogPosts[currentGalleryIndex].imagen_mime};base64,${blogPosts[currentGalleryIndex].imagen}`;
}

// Modal de creación
function openCreateModal() {
    const modal = document.getElementById('createModal');
    modal.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
}

function closeCreateModal() {
    const modal = document.getElementById('createModal');
    modal.classList.add('hidden');
    document.body.style.overflow = 'auto';
}

function publishPost() {
    showNotification();
    closeCreateModal();
    // Aquí iría la lógica para publicar
}

// Notificaciones
function showNotification() {
    const notification = document.getElementById('notification');
    notification.classList.remove('translate-x-40', 'opacity-0');
    notification.classList.add('translate-x-0', 'opacity-100');
    
    setTimeout(() => {
        notification.classList.remove('translate-x-0', 'opacity-100');
        notification.classList.add('translate-x-40', 'opacity-0');
    }, 3000);
}

// Animaciones para el input de comentarios
function expandCommentInput(input) {
    const button = input.nextElementSibling;
    button.classList.remove('opacity-0');
    input.style.paddingRight = '32px';
}

function collapseCommentInput(input) {
    if (input.value === '') {
        const button = input.nextElementSibling;
        button.classList.add('opacity-0');
        input.style.paddingRight = '';
    }
}

function expandModalCommentInput(input) {
    input.style.paddingRight = '32px';
}

function collapseModalCommentInput(input) {
    if (input.value === '') {
        input.style.paddingRight = '';
    }
}

// Eventos al cargar la página
document.addEventListener('DOMContentLoaded', () => {
    // Configurar el formulario de comentarios
    const commentForm = document.querySelector('#commentsModal .comment-form');
    if (commentForm) {
        commentForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            await publicarComentario();
        });
    }
    
    // Configurar el botón de enviar comentario
    const commentInput = document.querySelector('#commentsModal .comment-input');
    if (commentInput) {
        commentInput.addEventListener('keypress', async (e) => {
            if (e.key === 'Enter') {
                await publicarComentario();
            }
        });
    }
    
    // Galería
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    if (prevBtn) prevBtn.addEventListener('click', () => navigateGallery(-1));
    if (nextBtn) nextBtn.addEventListener('click', () => navigateGallery(1));
    
    // Mostrar animaciones cuando los elementos son visibles
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('animate-fadeInUp');
                observer.unobserve(entry.target);
            }
        });
    }, { threshold: 0.1 });
    
    document.querySelectorAll('.post-card').forEach(card => {
        observer.observe(card);
    });
    
    // Simular notificación (solo para demo)
    setTimeout(showNotification, 5000);
});

// Efecto parallax para el hero
window.addEventListener('scroll', function() {
    const scrollPosition = window.pageYOffset;
    const parallaxElement = document.querySelector('.parallax-bg');
    if (parallaxElement) {
        parallaxElement.style.transform = `translateY(${scrollPosition * 0.3}px)`;
    }
});

// Cerrar modal de comentarios
function closeCommentsModal() {
    const modal = document.getElementById('commentsModal');
    modal.classList.add('hidden');
    document.body.style.overflow = 'auto';
}



// Configurar botones de reacción
document.querySelectorAll('.reaction-button').forEach(button => {
    button.addEventListener('click', (e) => {
        e.stopPropagation();
        toggleReactions(button);
    });
});

// Configurar opciones de reacción
document.querySelectorAll('.reaction-option').forEach(option => {
    option.addEventListener('click', (e) => {
        const postId = e.target.closest('.reactions-bar').previousElementSibling.getAttribute('data-post-id');
        const reactionType = e.target.getAttribute('data-reaction');
        reaccionar(postId, reactionType);
        
        // Ocultar la barra después de seleccionar
        e.target.closest('.reactions-bar').classList.add('hidden');
    });
});
</script>
<script>
  function openGallery(postIndex) {
    const post = document.querySelector(`article[data-post-id="${postIndex}"] img`);
    const modal = document.getElementById("imageModal");
    const modalImg = document.getElementById("modalImage");
    
    if (post && post.src) {
      modalImg.src = post.src;
      modal.classList.remove("hidden");
    } else {
      alert("No se pudo cargar la imagen.");
    }
  }

  function closeGallery() {
    const modal = document.getElementById("imageModal");
    const modalImg = document.getElementById("modalImage");
    modal.classList.add("hidden");
    modalImg.src = ""; // Limpiar imagen para evitar errores posteriores
  }

  // Cierra el modal si se hace clic fuera de la imagen
  document.getElementById("imageModal").addEventListener("click", function(e) {
    if (e.target.id === "imageModal") {
      closeGallery();
    }
  });
</script>

</body>
</html>